/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.5.1-660c2a2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using io.kubernetes.csharp.Client;
using io.kubernetes.csharp.Api;
using io.kubernetes.csharp.Model;

namespace io.kubernetes.csharp.Test
{
    /// <summary>
    ///  Class for testing StorageV1beta1Api
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class StorageV1beta1ApiTests
    {
        private StorageV1beta1Api instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new StorageV1beta1Api();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of StorageV1beta1Api
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' StorageV1beta1Api
            //Assert.IsInstanceOfType(typeof(StorageV1beta1Api), instance, "instance is a StorageV1beta1Api");
        }

        
        /// <summary>
        /// Test CreateStorageClass
        /// </summary>
        [Test]
        public void CreateStorageClassTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //V1beta1StorageClass body = null;
            //string pretty = null;
            //var response = instance.CreateStorageClass(body, pretty);
            //Assert.IsInstanceOf<V1beta1StorageClass> (response, "response is V1beta1StorageClass");
        }
        
        /// <summary>
        /// Test DeleteCollectionStorageClass
        /// </summary>
        [Test]
        public void DeleteCollectionStorageClassTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pretty = null;
            //string fieldSelector = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.DeleteCollectionStorageClass(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<UnversionedStatus> (response, "response is UnversionedStatus");
        }
        
        /// <summary>
        /// Test DeleteStorageClass
        /// </summary>
        [Test]
        public void DeleteStorageClassTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //V1DeleteOptions body = null;
            //string pretty = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //var response = instance.DeleteStorageClass(name, body, pretty, gracePeriodSeconds, orphanDependents);
            //Assert.IsInstanceOf<UnversionedStatus> (response, "response is UnversionedStatus");
        }
        
        /// <summary>
        /// Test GetAPIResources
        /// </summary>
        [Test]
        public void GetAPIResourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAPIResources();
            //Assert.IsInstanceOf<UnversionedAPIResourceList> (response, "response is UnversionedAPIResourceList");
        }
        
        /// <summary>
        /// Test ListStorageClass
        /// </summary>
        [Test]
        public void ListStorageClassTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pretty = null;
            //string fieldSelector = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListStorageClass(pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1beta1StorageClassList> (response, "response is V1beta1StorageClassList");
        }
        
        /// <summary>
        /// Test PatchStorageClass
        /// </summary>
        [Test]
        public void PatchStorageClassTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //UnversionedPatch body = null;
            //string pretty = null;
            //var response = instance.PatchStorageClass(name, body, pretty);
            //Assert.IsInstanceOf<V1beta1StorageClass> (response, "response is V1beta1StorageClass");
        }
        
        /// <summary>
        /// Test ReadStorageClass
        /// </summary>
        [Test]
        public void ReadStorageClassTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string pretty = null;
            //bool? exact = null;
            //bool? export = null;
            //var response = instance.ReadStorageClass(name, pretty, exact, export);
            //Assert.IsInstanceOf<V1beta1StorageClass> (response, "response is V1beta1StorageClass");
        }
        
        /// <summary>
        /// Test ReplaceStorageClass
        /// </summary>
        [Test]
        public void ReplaceStorageClassTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //V1beta1StorageClass body = null;
            //string pretty = null;
            //var response = instance.ReplaceStorageClass(name, body, pretty);
            //Assert.IsInstanceOf<V1beta1StorageClass> (response, "response is V1beta1StorageClass");
        }
        
    }

}
