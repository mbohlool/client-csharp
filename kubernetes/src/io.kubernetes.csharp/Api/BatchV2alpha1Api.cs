/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.5.1-660c2a2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using io.kubernetes.csharp.Client;
using io.kubernetes.csharp.Model;

namespace io.kubernetes.csharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchV2alpha1Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        V2alpha1CronJob CreateNamespacedCronJob (string _namespace, V2alpha1CronJob body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        ApiResponse<V2alpha1CronJob> CreateNamespacedCronJobWithHttpInfo (string _namespace, V2alpha1CronJob body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1Job</returns>
        V2alpha1Job CreateNamespacedJob (string _namespace, V2alpha1Job body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1Job</returns>
        ApiResponse<V2alpha1Job> CreateNamespacedJobWithHttpInfo (string _namespace, V2alpha1Job body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        V2alpha1CronJob CreateNamespacedScheduledJob (string _namespace, V2alpha1CronJob body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        ApiResponse<V2alpha1CronJob> CreateNamespacedScheduledJobWithHttpInfo (string _namespace, V2alpha1CronJob body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteCollectionNamespacedCronJob (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of UnversionedStatus</returns>
        ApiResponse<UnversionedStatus> DeleteCollectionNamespacedCronJobWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteCollectionNamespacedJob (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of UnversionedStatus</returns>
        ApiResponse<UnversionedStatus> DeleteCollectionNamespacedJobWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteCollectionNamespacedScheduledJob (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of UnversionedStatus</returns>
        ApiResponse<UnversionedStatus> DeleteCollectionNamespacedScheduledJobWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. (optional)</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedCronJob (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. (optional)</param>
        /// <returns>ApiResponse of UnversionedStatus</returns>
        ApiResponse<UnversionedStatus> DeleteNamespacedCronJobWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. (optional)</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedJob (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. (optional)</param>
        /// <returns>ApiResponse of UnversionedStatus</returns>
        ApiResponse<UnversionedStatus> DeleteNamespacedJobWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. (optional)</param>
        /// <returns>UnversionedStatus</returns>
        UnversionedStatus DeleteNamespacedScheduledJob (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. (optional)</param>
        /// <returns>ApiResponse of UnversionedStatus</returns>
        ApiResponse<UnversionedStatus> DeleteNamespacedScheduledJobWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get available resources
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UnversionedAPIResourceList</returns>
        UnversionedAPIResourceList GetAPIResources ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get available resources
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UnversionedAPIResourceList</returns>
        ApiResponse<UnversionedAPIResourceList> GetAPIResourcesWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V2alpha1CronJobList</returns>
        V2alpha1CronJobList ListCronJobForAllNamespaces (string fieldSelector = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJobList</returns>
        ApiResponse<V2alpha1CronJobList> ListCronJobForAllNamespacesWithHttpInfo (string fieldSelector = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V2alpha1JobList</returns>
        V2alpha1JobList ListJobForAllNamespaces (string fieldSelector = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V2alpha1JobList</returns>
        ApiResponse<V2alpha1JobList> ListJobForAllNamespacesWithHttpInfo (string fieldSelector = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V2alpha1CronJobList</returns>
        V2alpha1CronJobList ListNamespacedCronJob (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJobList</returns>
        ApiResponse<V2alpha1CronJobList> ListNamespacedCronJobWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V2alpha1JobList</returns>
        V2alpha1JobList ListNamespacedJob (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V2alpha1JobList</returns>
        ApiResponse<V2alpha1JobList> ListNamespacedJobWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V2alpha1CronJobList</returns>
        V2alpha1CronJobList ListNamespacedScheduledJob (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJobList</returns>
        ApiResponse<V2alpha1CronJobList> ListNamespacedScheduledJobWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V2alpha1CronJobList</returns>
        V2alpha1CronJobList ListScheduledJobForAllNamespaces (string fieldSelector = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJobList</returns>
        ApiResponse<V2alpha1CronJobList> ListScheduledJobForAllNamespacesWithHttpInfo (string fieldSelector = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        V2alpha1CronJob PatchNamespacedCronJob (string name, string _namespace, UnversionedPatch body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        ApiResponse<V2alpha1CronJob> PatchNamespacedCronJobWithHttpInfo (string name, string _namespace, UnversionedPatch body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        V2alpha1CronJob PatchNamespacedCronJobStatus (string name, string _namespace, UnversionedPatch body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        ApiResponse<V2alpha1CronJob> PatchNamespacedCronJobStatusWithHttpInfo (string name, string _namespace, UnversionedPatch body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1Job</returns>
        V2alpha1Job PatchNamespacedJob (string name, string _namespace, UnversionedPatch body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1Job</returns>
        ApiResponse<V2alpha1Job> PatchNamespacedJobWithHttpInfo (string name, string _namespace, UnversionedPatch body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1Job</returns>
        V2alpha1Job PatchNamespacedJobStatus (string name, string _namespace, UnversionedPatch body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1Job</returns>
        ApiResponse<V2alpha1Job> PatchNamespacedJobStatusWithHttpInfo (string name, string _namespace, UnversionedPatch body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        V2alpha1CronJob PatchNamespacedScheduledJob (string name, string _namespace, UnversionedPatch body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        ApiResponse<V2alpha1CronJob> PatchNamespacedScheduledJobWithHttpInfo (string name, string _namespace, UnversionedPatch body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        V2alpha1CronJob PatchNamespacedScheduledJobStatus (string name, string _namespace, UnversionedPatch body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        ApiResponse<V2alpha1CronJob> PatchNamespacedScheduledJobStatusWithHttpInfo (string name, string _namespace, UnversionedPatch body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39; (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        V2alpha1CronJob ReadNamespacedCronJob (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39; (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        ApiResponse<V2alpha1CronJob> ReadNamespacedCronJobWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        V2alpha1CronJob ReadNamespacedCronJobStatus (string name, string _namespace, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        ApiResponse<V2alpha1CronJob> ReadNamespacedCronJobStatusWithHttpInfo (string name, string _namespace, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39; (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>V2alpha1Job</returns>
        V2alpha1Job ReadNamespacedJob (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39; (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>ApiResponse of V2alpha1Job</returns>
        ApiResponse<V2alpha1Job> ReadNamespacedJobWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1Job</returns>
        V2alpha1Job ReadNamespacedJobStatus (string name, string _namespace, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1Job</returns>
        ApiResponse<V2alpha1Job> ReadNamespacedJobStatusWithHttpInfo (string name, string _namespace, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39; (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        V2alpha1CronJob ReadNamespacedScheduledJob (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39; (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        ApiResponse<V2alpha1CronJob> ReadNamespacedScheduledJobWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        V2alpha1CronJob ReadNamespacedScheduledJobStatus (string name, string _namespace, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        ApiResponse<V2alpha1CronJob> ReadNamespacedScheduledJobStatusWithHttpInfo (string name, string _namespace, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        V2alpha1CronJob ReplaceNamespacedCronJob (string name, string _namespace, V2alpha1CronJob body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        ApiResponse<V2alpha1CronJob> ReplaceNamespacedCronJobWithHttpInfo (string name, string _namespace, V2alpha1CronJob body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        V2alpha1CronJob ReplaceNamespacedCronJobStatus (string name, string _namespace, V2alpha1CronJob body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        ApiResponse<V2alpha1CronJob> ReplaceNamespacedCronJobStatusWithHttpInfo (string name, string _namespace, V2alpha1CronJob body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1Job</returns>
        V2alpha1Job ReplaceNamespacedJob (string name, string _namespace, V2alpha1Job body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1Job</returns>
        ApiResponse<V2alpha1Job> ReplaceNamespacedJobWithHttpInfo (string name, string _namespace, V2alpha1Job body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1Job</returns>
        V2alpha1Job ReplaceNamespacedJobStatus (string name, string _namespace, V2alpha1Job body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1Job</returns>
        ApiResponse<V2alpha1Job> ReplaceNamespacedJobStatusWithHttpInfo (string name, string _namespace, V2alpha1Job body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        V2alpha1CronJob ReplaceNamespacedScheduledJob (string name, string _namespace, V2alpha1CronJob body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        ApiResponse<V2alpha1CronJob> ReplaceNamespacedScheduledJobWithHttpInfo (string name, string _namespace, V2alpha1CronJob body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        V2alpha1CronJob ReplaceNamespacedScheduledJobStatus (string name, string _namespace, V2alpha1CronJob body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        ApiResponse<V2alpha1CronJob> ReplaceNamespacedScheduledJobStatusWithHttpInfo (string name, string _namespace, V2alpha1CronJob body, string pretty = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        System.Threading.Tasks.Task<V2alpha1CronJob> CreateNamespacedCronJobAsync (string _namespace, V2alpha1CronJob body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> CreateNamespacedCronJobAsyncWithHttpInfo (string _namespace, V2alpha1CronJob body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1Job</returns>
        System.Threading.Tasks.Task<V2alpha1Job> CreateNamespacedJobAsync (string _namespace, V2alpha1Job body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<V2alpha1Job>> CreateNamespacedJobAsyncWithHttpInfo (string _namespace, V2alpha1Job body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        System.Threading.Tasks.Task<V2alpha1CronJob> CreateNamespacedScheduledJobAsync (string _namespace, V2alpha1CronJob body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> CreateNamespacedScheduledJobAsyncWithHttpInfo (string _namespace, V2alpha1CronJob body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteCollectionNamespacedCronJobAsync (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (UnversionedStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnversionedStatus>> DeleteCollectionNamespacedCronJobAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteCollectionNamespacedJobAsync (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (UnversionedStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnversionedStatus>> DeleteCollectionNamespacedJobAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteCollectionNamespacedScheduledJobAsync (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (UnversionedStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnversionedStatus>> DeleteCollectionNamespacedScheduledJobAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. (optional)</param>
        /// <returns>Task of UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedCronJobAsync (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. (optional)</param>
        /// <returns>Task of ApiResponse (UnversionedStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnversionedStatus>> DeleteNamespacedCronJobAsyncWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. (optional)</param>
        /// <returns>Task of UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedJobAsync (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. (optional)</param>
        /// <returns>Task of ApiResponse (UnversionedStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnversionedStatus>> DeleteNamespacedJobAsyncWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. (optional)</param>
        /// <returns>Task of UnversionedStatus</returns>
        System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedScheduledJobAsync (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. (optional)</param>
        /// <returns>Task of ApiResponse (UnversionedStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnversionedStatus>> DeleteNamespacedScheduledJobAsyncWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get available resources
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UnversionedAPIResourceList</returns>
        System.Threading.Tasks.Task<UnversionedAPIResourceList> GetAPIResourcesAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get available resources
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UnversionedAPIResourceList)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnversionedAPIResourceList>> GetAPIResourcesAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V2alpha1CronJobList</returns>
        System.Threading.Tasks.Task<V2alpha1CronJobList> ListCronJobForAllNamespacesAsync (string fieldSelector = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJobList)</returns>
        System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJobList>> ListCronJobForAllNamespacesAsyncWithHttpInfo (string fieldSelector = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V2alpha1JobList</returns>
        System.Threading.Tasks.Task<V2alpha1JobList> ListJobForAllNamespacesAsync (string fieldSelector = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1JobList)</returns>
        System.Threading.Tasks.Task<ApiResponse<V2alpha1JobList>> ListJobForAllNamespacesAsyncWithHttpInfo (string fieldSelector = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V2alpha1CronJobList</returns>
        System.Threading.Tasks.Task<V2alpha1CronJobList> ListNamespacedCronJobAsync (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJobList)</returns>
        System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJobList>> ListNamespacedCronJobAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V2alpha1JobList</returns>
        System.Threading.Tasks.Task<V2alpha1JobList> ListNamespacedJobAsync (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1JobList)</returns>
        System.Threading.Tasks.Task<ApiResponse<V2alpha1JobList>> ListNamespacedJobAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V2alpha1CronJobList</returns>
        System.Threading.Tasks.Task<V2alpha1CronJobList> ListNamespacedScheduledJobAsync (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJobList)</returns>
        System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJobList>> ListNamespacedScheduledJobAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V2alpha1CronJobList</returns>
        System.Threading.Tasks.Task<V2alpha1CronJobList> ListScheduledJobForAllNamespacesAsync (string fieldSelector = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJobList)</returns>
        System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJobList>> ListScheduledJobForAllNamespacesAsyncWithHttpInfo (string fieldSelector = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        System.Threading.Tasks.Task<V2alpha1CronJob> PatchNamespacedCronJobAsync (string name, string _namespace, UnversionedPatch body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> PatchNamespacedCronJobAsyncWithHttpInfo (string name, string _namespace, UnversionedPatch body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        System.Threading.Tasks.Task<V2alpha1CronJob> PatchNamespacedCronJobStatusAsync (string name, string _namespace, UnversionedPatch body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> PatchNamespacedCronJobStatusAsyncWithHttpInfo (string name, string _namespace, UnversionedPatch body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1Job</returns>
        System.Threading.Tasks.Task<V2alpha1Job> PatchNamespacedJobAsync (string name, string _namespace, UnversionedPatch body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<V2alpha1Job>> PatchNamespacedJobAsyncWithHttpInfo (string name, string _namespace, UnversionedPatch body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1Job</returns>
        System.Threading.Tasks.Task<V2alpha1Job> PatchNamespacedJobStatusAsync (string name, string _namespace, UnversionedPatch body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<V2alpha1Job>> PatchNamespacedJobStatusAsyncWithHttpInfo (string name, string _namespace, UnversionedPatch body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        System.Threading.Tasks.Task<V2alpha1CronJob> PatchNamespacedScheduledJobAsync (string name, string _namespace, UnversionedPatch body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> PatchNamespacedScheduledJobAsyncWithHttpInfo (string name, string _namespace, UnversionedPatch body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        System.Threading.Tasks.Task<V2alpha1CronJob> PatchNamespacedScheduledJobStatusAsync (string name, string _namespace, UnversionedPatch body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> PatchNamespacedScheduledJobStatusAsyncWithHttpInfo (string name, string _namespace, UnversionedPatch body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39; (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        System.Threading.Tasks.Task<V2alpha1CronJob> ReadNamespacedCronJobAsync (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39; (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> ReadNamespacedCronJobAsyncWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        System.Threading.Tasks.Task<V2alpha1CronJob> ReadNamespacedCronJobStatusAsync (string name, string _namespace, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> ReadNamespacedCronJobStatusAsyncWithHttpInfo (string name, string _namespace, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39; (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of V2alpha1Job</returns>
        System.Threading.Tasks.Task<V2alpha1Job> ReadNamespacedJobAsync (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39; (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<V2alpha1Job>> ReadNamespacedJobAsyncWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1Job</returns>
        System.Threading.Tasks.Task<V2alpha1Job> ReadNamespacedJobStatusAsync (string name, string _namespace, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<V2alpha1Job>> ReadNamespacedJobStatusAsyncWithHttpInfo (string name, string _namespace, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39; (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        System.Threading.Tasks.Task<V2alpha1CronJob> ReadNamespacedScheduledJobAsync (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39; (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> ReadNamespacedScheduledJobAsyncWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        System.Threading.Tasks.Task<V2alpha1CronJob> ReadNamespacedScheduledJobStatusAsync (string name, string _namespace, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> ReadNamespacedScheduledJobStatusAsyncWithHttpInfo (string name, string _namespace, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        System.Threading.Tasks.Task<V2alpha1CronJob> ReplaceNamespacedCronJobAsync (string name, string _namespace, V2alpha1CronJob body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> ReplaceNamespacedCronJobAsyncWithHttpInfo (string name, string _namespace, V2alpha1CronJob body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        System.Threading.Tasks.Task<V2alpha1CronJob> ReplaceNamespacedCronJobStatusAsync (string name, string _namespace, V2alpha1CronJob body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified CronJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> ReplaceNamespacedCronJobStatusAsyncWithHttpInfo (string name, string _namespace, V2alpha1CronJob body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1Job</returns>
        System.Threading.Tasks.Task<V2alpha1Job> ReplaceNamespacedJobAsync (string name, string _namespace, V2alpha1Job body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<V2alpha1Job>> ReplaceNamespacedJobAsyncWithHttpInfo (string name, string _namespace, V2alpha1Job body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1Job</returns>
        System.Threading.Tasks.Task<V2alpha1Job> ReplaceNamespacedJobStatusAsync (string name, string _namespace, V2alpha1Job body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified Job
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<V2alpha1Job>> ReplaceNamespacedJobStatusAsyncWithHttpInfo (string name, string _namespace, V2alpha1Job body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        System.Threading.Tasks.Task<V2alpha1CronJob> ReplaceNamespacedScheduledJobAsync (string name, string _namespace, V2alpha1CronJob body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> ReplaceNamespacedScheduledJobAsyncWithHttpInfo (string name, string _namespace, V2alpha1CronJob body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        System.Threading.Tasks.Task<V2alpha1CronJob> ReplaceNamespacedScheduledJobStatusAsync (string name, string _namespace, V2alpha1CronJob body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified ScheduledJob
        /// </remarks>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> ReplaceNamespacedScheduledJobStatusAsyncWithHttpInfo (string name, string _namespace, V2alpha1CronJob body, string pretty = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BatchV2alpha1Api : IBatchV2alpha1Api
    {
        private io.kubernetes.csharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchV2alpha1Api"/> class.
        /// </summary>
        /// <returns></returns>
        public BatchV2alpha1Api(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = io.kubernetes.csharp.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchV2alpha1Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BatchV2alpha1Api(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = io.kubernetes.csharp.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public io.kubernetes.csharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  create a CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        public V2alpha1CronJob CreateNamespacedCronJob (string _namespace, V2alpha1CronJob body, string pretty = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = CreateNamespacedCronJobWithHttpInfo(_namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  create a CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        public ApiResponse< V2alpha1CronJob > CreateNamespacedCronJobWithHttpInfo (string _namespace, V2alpha1CronJob body, string pretty = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->CreateNamespacedCronJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->CreateNamespacedCronJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNamespacedCronJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

        /// <summary>
        ///  create a CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        public async System.Threading.Tasks.Task<V2alpha1CronJob> CreateNamespacedCronJobAsync (string _namespace, V2alpha1CronJob body, string pretty = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = await CreateNamespacedCronJobAsyncWithHttpInfo(_namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  create a CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> CreateNamespacedCronJobAsyncWithHttpInfo (string _namespace, V2alpha1CronJob body, string pretty = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->CreateNamespacedCronJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->CreateNamespacedCronJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNamespacedCronJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

        /// <summary>
        ///  create a Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1Job</returns>
        public V2alpha1Job CreateNamespacedJob (string _namespace, V2alpha1Job body, string pretty = null)
        {
             ApiResponse<V2alpha1Job> localVarResponse = CreateNamespacedJobWithHttpInfo(_namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  create a Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1Job</returns>
        public ApiResponse< V2alpha1Job > CreateNamespacedJobWithHttpInfo (string _namespace, V2alpha1Job body, string pretty = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->CreateNamespacedJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->CreateNamespacedJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNamespacedJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1Job)));
            
        }

        /// <summary>
        ///  create a Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1Job</returns>
        public async System.Threading.Tasks.Task<V2alpha1Job> CreateNamespacedJobAsync (string _namespace, V2alpha1Job body, string pretty = null)
        {
             ApiResponse<V2alpha1Job> localVarResponse = await CreateNamespacedJobAsyncWithHttpInfo(_namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  create a Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1Job)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V2alpha1Job>> CreateNamespacedJobAsyncWithHttpInfo (string _namespace, V2alpha1Job body, string pretty = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->CreateNamespacedJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->CreateNamespacedJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNamespacedJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1Job)));
            
        }

        /// <summary>
        ///  create a ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        public V2alpha1CronJob CreateNamespacedScheduledJob (string _namespace, V2alpha1CronJob body, string pretty = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = CreateNamespacedScheduledJobWithHttpInfo(_namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  create a ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        public ApiResponse< V2alpha1CronJob > CreateNamespacedScheduledJobWithHttpInfo (string _namespace, V2alpha1CronJob body, string pretty = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->CreateNamespacedScheduledJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->CreateNamespacedScheduledJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNamespacedScheduledJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

        /// <summary>
        ///  create a ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        public async System.Threading.Tasks.Task<V2alpha1CronJob> CreateNamespacedScheduledJobAsync (string _namespace, V2alpha1CronJob body, string pretty = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = await CreateNamespacedScheduledJobAsyncWithHttpInfo(_namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  create a ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> CreateNamespacedScheduledJobAsyncWithHttpInfo (string _namespace, V2alpha1CronJob body, string pretty = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->CreateNamespacedScheduledJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->CreateNamespacedScheduledJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNamespacedScheduledJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

        /// <summary>
        ///  delete collection of CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>UnversionedStatus</returns>
        public UnversionedStatus DeleteCollectionNamespacedCronJob (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<UnversionedStatus> localVarResponse = DeleteCollectionNamespacedCronJobWithHttpInfo(_namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  delete collection of CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of UnversionedStatus</returns>
        public ApiResponse< UnversionedStatus > DeleteCollectionNamespacedCronJobWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->DeleteCollectionNamespacedCronJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCollectionNamespacedCronJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnversionedStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnversionedStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnversionedStatus)));
            
        }

        /// <summary>
        ///  delete collection of CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteCollectionNamespacedCronJobAsync (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<UnversionedStatus> localVarResponse = await DeleteCollectionNamespacedCronJobAsyncWithHttpInfo(_namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  delete collection of CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (UnversionedStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnversionedStatus>> DeleteCollectionNamespacedCronJobAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->DeleteCollectionNamespacedCronJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCollectionNamespacedCronJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnversionedStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnversionedStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnversionedStatus)));
            
        }

        /// <summary>
        ///  delete collection of Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>UnversionedStatus</returns>
        public UnversionedStatus DeleteCollectionNamespacedJob (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<UnversionedStatus> localVarResponse = DeleteCollectionNamespacedJobWithHttpInfo(_namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  delete collection of Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of UnversionedStatus</returns>
        public ApiResponse< UnversionedStatus > DeleteCollectionNamespacedJobWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->DeleteCollectionNamespacedJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCollectionNamespacedJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnversionedStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnversionedStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnversionedStatus)));
            
        }

        /// <summary>
        ///  delete collection of Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteCollectionNamespacedJobAsync (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<UnversionedStatus> localVarResponse = await DeleteCollectionNamespacedJobAsyncWithHttpInfo(_namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  delete collection of Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (UnversionedStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnversionedStatus>> DeleteCollectionNamespacedJobAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->DeleteCollectionNamespacedJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCollectionNamespacedJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnversionedStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnversionedStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnversionedStatus)));
            
        }

        /// <summary>
        ///  delete collection of ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>UnversionedStatus</returns>
        public UnversionedStatus DeleteCollectionNamespacedScheduledJob (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<UnversionedStatus> localVarResponse = DeleteCollectionNamespacedScheduledJobWithHttpInfo(_namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  delete collection of ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of UnversionedStatus</returns>
        public ApiResponse< UnversionedStatus > DeleteCollectionNamespacedScheduledJobWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->DeleteCollectionNamespacedScheduledJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCollectionNamespacedScheduledJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnversionedStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnversionedStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnversionedStatus)));
            
        }

        /// <summary>
        ///  delete collection of ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteCollectionNamespacedScheduledJobAsync (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<UnversionedStatus> localVarResponse = await DeleteCollectionNamespacedScheduledJobAsyncWithHttpInfo(_namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  delete collection of ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (UnversionedStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnversionedStatus>> DeleteCollectionNamespacedScheduledJobAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->DeleteCollectionNamespacedScheduledJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCollectionNamespacedScheduledJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnversionedStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnversionedStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnversionedStatus)));
            
        }

        /// <summary>
        ///  delete a CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. (optional)</param>
        /// <returns>UnversionedStatus</returns>
        public UnversionedStatus DeleteNamespacedCronJob (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null)
        {
             ApiResponse<UnversionedStatus> localVarResponse = DeleteNamespacedCronJobWithHttpInfo(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  delete a CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. (optional)</param>
        /// <returns>ApiResponse of UnversionedStatus</returns>
        public ApiResponse< UnversionedStatus > DeleteNamespacedCronJobWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->DeleteNamespacedCronJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->DeleteNamespacedCronJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->DeleteNamespacedCronJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (gracePeriodSeconds != null) localVarQueryParams.Add("gracePeriodSeconds", Configuration.ApiClient.ParameterToString(gracePeriodSeconds)); // query parameter
            if (orphanDependents != null) localVarQueryParams.Add("orphanDependents", Configuration.ApiClient.ParameterToString(orphanDependents)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNamespacedCronJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnversionedStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnversionedStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnversionedStatus)));
            
        }

        /// <summary>
        ///  delete a CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. (optional)</param>
        /// <returns>Task of UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedCronJobAsync (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null)
        {
             ApiResponse<UnversionedStatus> localVarResponse = await DeleteNamespacedCronJobAsyncWithHttpInfo(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  delete a CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. (optional)</param>
        /// <returns>Task of ApiResponse (UnversionedStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnversionedStatus>> DeleteNamespacedCronJobAsyncWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->DeleteNamespacedCronJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->DeleteNamespacedCronJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->DeleteNamespacedCronJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (gracePeriodSeconds != null) localVarQueryParams.Add("gracePeriodSeconds", Configuration.ApiClient.ParameterToString(gracePeriodSeconds)); // query parameter
            if (orphanDependents != null) localVarQueryParams.Add("orphanDependents", Configuration.ApiClient.ParameterToString(orphanDependents)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNamespacedCronJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnversionedStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnversionedStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnversionedStatus)));
            
        }

        /// <summary>
        ///  delete a Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. (optional)</param>
        /// <returns>UnversionedStatus</returns>
        public UnversionedStatus DeleteNamespacedJob (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null)
        {
             ApiResponse<UnversionedStatus> localVarResponse = DeleteNamespacedJobWithHttpInfo(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  delete a Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. (optional)</param>
        /// <returns>ApiResponse of UnversionedStatus</returns>
        public ApiResponse< UnversionedStatus > DeleteNamespacedJobWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->DeleteNamespacedJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->DeleteNamespacedJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->DeleteNamespacedJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/jobs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (gracePeriodSeconds != null) localVarQueryParams.Add("gracePeriodSeconds", Configuration.ApiClient.ParameterToString(gracePeriodSeconds)); // query parameter
            if (orphanDependents != null) localVarQueryParams.Add("orphanDependents", Configuration.ApiClient.ParameterToString(orphanDependents)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNamespacedJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnversionedStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnversionedStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnversionedStatus)));
            
        }

        /// <summary>
        ///  delete a Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. (optional)</param>
        /// <returns>Task of UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedJobAsync (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null)
        {
             ApiResponse<UnversionedStatus> localVarResponse = await DeleteNamespacedJobAsyncWithHttpInfo(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  delete a Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. (optional)</param>
        /// <returns>Task of ApiResponse (UnversionedStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnversionedStatus>> DeleteNamespacedJobAsyncWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->DeleteNamespacedJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->DeleteNamespacedJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->DeleteNamespacedJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/jobs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (gracePeriodSeconds != null) localVarQueryParams.Add("gracePeriodSeconds", Configuration.ApiClient.ParameterToString(gracePeriodSeconds)); // query parameter
            if (orphanDependents != null) localVarQueryParams.Add("orphanDependents", Configuration.ApiClient.ParameterToString(orphanDependents)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNamespacedJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnversionedStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnversionedStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnversionedStatus)));
            
        }

        /// <summary>
        ///  delete a ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. (optional)</param>
        /// <returns>UnversionedStatus</returns>
        public UnversionedStatus DeleteNamespacedScheduledJob (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null)
        {
             ApiResponse<UnversionedStatus> localVarResponse = DeleteNamespacedScheduledJobWithHttpInfo(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  delete a ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. (optional)</param>
        /// <returns>ApiResponse of UnversionedStatus</returns>
        public ApiResponse< UnversionedStatus > DeleteNamespacedScheduledJobWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->DeleteNamespacedScheduledJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->DeleteNamespacedScheduledJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->DeleteNamespacedScheduledJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (gracePeriodSeconds != null) localVarQueryParams.Add("gracePeriodSeconds", Configuration.ApiClient.ParameterToString(gracePeriodSeconds)); // query parameter
            if (orphanDependents != null) localVarQueryParams.Add("orphanDependents", Configuration.ApiClient.ParameterToString(orphanDependents)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNamespacedScheduledJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnversionedStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnversionedStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnversionedStatus)));
            
        }

        /// <summary>
        ///  delete a ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. (optional)</param>
        /// <returns>Task of UnversionedStatus</returns>
        public async System.Threading.Tasks.Task<UnversionedStatus> DeleteNamespacedScheduledJobAsync (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null)
        {
             ApiResponse<UnversionedStatus> localVarResponse = await DeleteNamespacedScheduledJobAsyncWithHttpInfo(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  delete a ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. (optional)</param>
        /// <returns>Task of ApiResponse (UnversionedStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnversionedStatus>> DeleteNamespacedScheduledJobAsyncWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->DeleteNamespacedScheduledJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->DeleteNamespacedScheduledJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->DeleteNamespacedScheduledJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (gracePeriodSeconds != null) localVarQueryParams.Add("gracePeriodSeconds", Configuration.ApiClient.ParameterToString(gracePeriodSeconds)); // query parameter
            if (orphanDependents != null) localVarQueryParams.Add("orphanDependents", Configuration.ApiClient.ParameterToString(orphanDependents)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNamespacedScheduledJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnversionedStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnversionedStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnversionedStatus)));
            
        }

        /// <summary>
        ///  get available resources
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UnversionedAPIResourceList</returns>
        public UnversionedAPIResourceList GetAPIResources ()
        {
             ApiResponse<UnversionedAPIResourceList> localVarResponse = GetAPIResourcesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  get available resources
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UnversionedAPIResourceList</returns>
        public ApiResponse< UnversionedAPIResourceList > GetAPIResourcesWithHttpInfo ()
        {

            var localVarPath = "/apis/batch/v2alpha1/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAPIResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnversionedAPIResourceList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnversionedAPIResourceList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnversionedAPIResourceList)));
            
        }

        /// <summary>
        ///  get available resources
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UnversionedAPIResourceList</returns>
        public async System.Threading.Tasks.Task<UnversionedAPIResourceList> GetAPIResourcesAsync ()
        {
             ApiResponse<UnversionedAPIResourceList> localVarResponse = await GetAPIResourcesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  get available resources
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UnversionedAPIResourceList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnversionedAPIResourceList>> GetAPIResourcesAsyncWithHttpInfo ()
        {

            var localVarPath = "/apis/batch/v2alpha1/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAPIResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnversionedAPIResourceList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnversionedAPIResourceList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnversionedAPIResourceList)));
            
        }

        /// <summary>
        ///  list or watch objects of kind CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V2alpha1CronJobList</returns>
        public V2alpha1CronJobList ListCronJobForAllNamespaces (string fieldSelector = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V2alpha1CronJobList> localVarResponse = ListCronJobForAllNamespacesWithHttpInfo(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  list or watch objects of kind CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJobList</returns>
        public ApiResponse< V2alpha1CronJobList > ListCronJobForAllNamespacesWithHttpInfo (string fieldSelector = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {

            var localVarPath = "/apis/batch/v2alpha1/cronjobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf", 
                "application/json;stream=watch", 
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCronJobForAllNamespaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJobList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJobList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJobList)));
            
        }

        /// <summary>
        ///  list or watch objects of kind CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V2alpha1CronJobList</returns>
        public async System.Threading.Tasks.Task<V2alpha1CronJobList> ListCronJobForAllNamespacesAsync (string fieldSelector = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V2alpha1CronJobList> localVarResponse = await ListCronJobForAllNamespacesAsyncWithHttpInfo(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  list or watch objects of kind CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJobList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJobList>> ListCronJobForAllNamespacesAsyncWithHttpInfo (string fieldSelector = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {

            var localVarPath = "/apis/batch/v2alpha1/cronjobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf", 
                "application/json;stream=watch", 
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCronJobForAllNamespaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJobList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJobList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJobList)));
            
        }

        /// <summary>
        ///  list or watch objects of kind Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V2alpha1JobList</returns>
        public V2alpha1JobList ListJobForAllNamespaces (string fieldSelector = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V2alpha1JobList> localVarResponse = ListJobForAllNamespacesWithHttpInfo(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  list or watch objects of kind Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V2alpha1JobList</returns>
        public ApiResponse< V2alpha1JobList > ListJobForAllNamespacesWithHttpInfo (string fieldSelector = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {

            var localVarPath = "/apis/batch/v2alpha1/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf", 
                "application/json;stream=watch", 
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListJobForAllNamespaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1JobList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1JobList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1JobList)));
            
        }

        /// <summary>
        ///  list or watch objects of kind Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V2alpha1JobList</returns>
        public async System.Threading.Tasks.Task<V2alpha1JobList> ListJobForAllNamespacesAsync (string fieldSelector = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V2alpha1JobList> localVarResponse = await ListJobForAllNamespacesAsyncWithHttpInfo(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  list or watch objects of kind Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1JobList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V2alpha1JobList>> ListJobForAllNamespacesAsyncWithHttpInfo (string fieldSelector = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {

            var localVarPath = "/apis/batch/v2alpha1/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf", 
                "application/json;stream=watch", 
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListJobForAllNamespaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1JobList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1JobList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1JobList)));
            
        }

        /// <summary>
        ///  list or watch objects of kind CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V2alpha1CronJobList</returns>
        public V2alpha1CronJobList ListNamespacedCronJob (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V2alpha1CronJobList> localVarResponse = ListNamespacedCronJobWithHttpInfo(_namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  list or watch objects of kind CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJobList</returns>
        public ApiResponse< V2alpha1CronJobList > ListNamespacedCronJobWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ListNamespacedCronJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf", 
                "application/json;stream=watch", 
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNamespacedCronJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJobList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJobList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJobList)));
            
        }

        /// <summary>
        ///  list or watch objects of kind CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V2alpha1CronJobList</returns>
        public async System.Threading.Tasks.Task<V2alpha1CronJobList> ListNamespacedCronJobAsync (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V2alpha1CronJobList> localVarResponse = await ListNamespacedCronJobAsyncWithHttpInfo(_namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  list or watch objects of kind CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJobList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJobList>> ListNamespacedCronJobAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ListNamespacedCronJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf", 
                "application/json;stream=watch", 
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNamespacedCronJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJobList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJobList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJobList)));
            
        }

        /// <summary>
        ///  list or watch objects of kind Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V2alpha1JobList</returns>
        public V2alpha1JobList ListNamespacedJob (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V2alpha1JobList> localVarResponse = ListNamespacedJobWithHttpInfo(_namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  list or watch objects of kind Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V2alpha1JobList</returns>
        public ApiResponse< V2alpha1JobList > ListNamespacedJobWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ListNamespacedJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf", 
                "application/json;stream=watch", 
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNamespacedJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1JobList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1JobList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1JobList)));
            
        }

        /// <summary>
        ///  list or watch objects of kind Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V2alpha1JobList</returns>
        public async System.Threading.Tasks.Task<V2alpha1JobList> ListNamespacedJobAsync (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V2alpha1JobList> localVarResponse = await ListNamespacedJobAsyncWithHttpInfo(_namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  list or watch objects of kind Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1JobList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V2alpha1JobList>> ListNamespacedJobAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ListNamespacedJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf", 
                "application/json;stream=watch", 
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNamespacedJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1JobList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1JobList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1JobList)));
            
        }

        /// <summary>
        ///  list or watch objects of kind ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V2alpha1CronJobList</returns>
        public V2alpha1CronJobList ListNamespacedScheduledJob (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V2alpha1CronJobList> localVarResponse = ListNamespacedScheduledJobWithHttpInfo(_namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  list or watch objects of kind ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJobList</returns>
        public ApiResponse< V2alpha1CronJobList > ListNamespacedScheduledJobWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ListNamespacedScheduledJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf", 
                "application/json;stream=watch", 
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNamespacedScheduledJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJobList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJobList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJobList)));
            
        }

        /// <summary>
        ///  list or watch objects of kind ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V2alpha1CronJobList</returns>
        public async System.Threading.Tasks.Task<V2alpha1CronJobList> ListNamespacedScheduledJobAsync (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V2alpha1CronJobList> localVarResponse = await ListNamespacedScheduledJobAsyncWithHttpInfo(_namespace, pretty, fieldSelector, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  list or watch objects of kind ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJobList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJobList>> ListNamespacedScheduledJobAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ListNamespacedScheduledJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf", 
                "application/json;stream=watch", 
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNamespacedScheduledJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJobList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJobList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJobList)));
            
        }

        /// <summary>
        ///  list or watch objects of kind ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V2alpha1CronJobList</returns>
        public V2alpha1CronJobList ListScheduledJobForAllNamespaces (string fieldSelector = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V2alpha1CronJobList> localVarResponse = ListScheduledJobForAllNamespacesWithHttpInfo(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  list or watch objects of kind ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJobList</returns>
        public ApiResponse< V2alpha1CronJobList > ListScheduledJobForAllNamespacesWithHttpInfo (string fieldSelector = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {

            var localVarPath = "/apis/batch/v2alpha1/scheduledjobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf", 
                "application/json;stream=watch", 
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListScheduledJobForAllNamespaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJobList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJobList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJobList)));
            
        }

        /// <summary>
        ///  list or watch objects of kind ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V2alpha1CronJobList</returns>
        public async System.Threading.Tasks.Task<V2alpha1CronJobList> ListScheduledJobForAllNamespacesAsync (string fieldSelector = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V2alpha1CronJobList> localVarResponse = await ListScheduledJobForAllNamespacesAsyncWithHttpInfo(fieldSelector, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  list or watch objects of kind ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJobList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJobList>> ListScheduledJobForAllNamespacesAsyncWithHttpInfo (string fieldSelector = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {

            var localVarPath = "/apis/batch/v2alpha1/scheduledjobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf", 
                "application/json;stream=watch", 
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListScheduledJobForAllNamespaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJobList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJobList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJobList)));
            
        }

        /// <summary>
        ///  partially update the specified CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        public V2alpha1CronJob PatchNamespacedCronJob (string name, string _namespace, UnversionedPatch body, string pretty = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = PatchNamespacedCronJobWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  partially update the specified CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        public ApiResponse< V2alpha1CronJob > PatchNamespacedCronJobWithHttpInfo (string name, string _namespace, UnversionedPatch body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->PatchNamespacedCronJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->PatchNamespacedCronJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->PatchNamespacedCronJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedCronJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

        /// <summary>
        ///  partially update the specified CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        public async System.Threading.Tasks.Task<V2alpha1CronJob> PatchNamespacedCronJobAsync (string name, string _namespace, UnversionedPatch body, string pretty = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = await PatchNamespacedCronJobAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  partially update the specified CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> PatchNamespacedCronJobAsyncWithHttpInfo (string name, string _namespace, UnversionedPatch body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->PatchNamespacedCronJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->PatchNamespacedCronJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->PatchNamespacedCronJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedCronJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

        /// <summary>
        ///  partially update status of the specified CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        public V2alpha1CronJob PatchNamespacedCronJobStatus (string name, string _namespace, UnversionedPatch body, string pretty = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = PatchNamespacedCronJobStatusWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  partially update status of the specified CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        public ApiResponse< V2alpha1CronJob > PatchNamespacedCronJobStatusWithHttpInfo (string name, string _namespace, UnversionedPatch body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->PatchNamespacedCronJobStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->PatchNamespacedCronJobStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->PatchNamespacedCronJobStatus");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedCronJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

        /// <summary>
        ///  partially update status of the specified CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        public async System.Threading.Tasks.Task<V2alpha1CronJob> PatchNamespacedCronJobStatusAsync (string name, string _namespace, UnversionedPatch body, string pretty = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = await PatchNamespacedCronJobStatusAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  partially update status of the specified CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> PatchNamespacedCronJobStatusAsyncWithHttpInfo (string name, string _namespace, UnversionedPatch body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->PatchNamespacedCronJobStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->PatchNamespacedCronJobStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->PatchNamespacedCronJobStatus");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedCronJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

        /// <summary>
        ///  partially update the specified Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1Job</returns>
        public V2alpha1Job PatchNamespacedJob (string name, string _namespace, UnversionedPatch body, string pretty = null)
        {
             ApiResponse<V2alpha1Job> localVarResponse = PatchNamespacedJobWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  partially update the specified Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1Job</returns>
        public ApiResponse< V2alpha1Job > PatchNamespacedJobWithHttpInfo (string name, string _namespace, UnversionedPatch body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->PatchNamespacedJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->PatchNamespacedJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->PatchNamespacedJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/jobs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1Job)));
            
        }

        /// <summary>
        ///  partially update the specified Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1Job</returns>
        public async System.Threading.Tasks.Task<V2alpha1Job> PatchNamespacedJobAsync (string name, string _namespace, UnversionedPatch body, string pretty = null)
        {
             ApiResponse<V2alpha1Job> localVarResponse = await PatchNamespacedJobAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  partially update the specified Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1Job)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V2alpha1Job>> PatchNamespacedJobAsyncWithHttpInfo (string name, string _namespace, UnversionedPatch body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->PatchNamespacedJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->PatchNamespacedJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->PatchNamespacedJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/jobs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1Job)));
            
        }

        /// <summary>
        ///  partially update status of the specified Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1Job</returns>
        public V2alpha1Job PatchNamespacedJobStatus (string name, string _namespace, UnversionedPatch body, string pretty = null)
        {
             ApiResponse<V2alpha1Job> localVarResponse = PatchNamespacedJobStatusWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  partially update status of the specified Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1Job</returns>
        public ApiResponse< V2alpha1Job > PatchNamespacedJobStatusWithHttpInfo (string name, string _namespace, UnversionedPatch body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->PatchNamespacedJobStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->PatchNamespacedJobStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->PatchNamespacedJobStatus");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/jobs/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1Job)));
            
        }

        /// <summary>
        ///  partially update status of the specified Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1Job</returns>
        public async System.Threading.Tasks.Task<V2alpha1Job> PatchNamespacedJobStatusAsync (string name, string _namespace, UnversionedPatch body, string pretty = null)
        {
             ApiResponse<V2alpha1Job> localVarResponse = await PatchNamespacedJobStatusAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  partially update status of the specified Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1Job)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V2alpha1Job>> PatchNamespacedJobStatusAsyncWithHttpInfo (string name, string _namespace, UnversionedPatch body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->PatchNamespacedJobStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->PatchNamespacedJobStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->PatchNamespacedJobStatus");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/jobs/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1Job)));
            
        }

        /// <summary>
        ///  partially update the specified ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        public V2alpha1CronJob PatchNamespacedScheduledJob (string name, string _namespace, UnversionedPatch body, string pretty = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = PatchNamespacedScheduledJobWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  partially update the specified ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        public ApiResponse< V2alpha1CronJob > PatchNamespacedScheduledJobWithHttpInfo (string name, string _namespace, UnversionedPatch body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->PatchNamespacedScheduledJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->PatchNamespacedScheduledJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->PatchNamespacedScheduledJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedScheduledJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

        /// <summary>
        ///  partially update the specified ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        public async System.Threading.Tasks.Task<V2alpha1CronJob> PatchNamespacedScheduledJobAsync (string name, string _namespace, UnversionedPatch body, string pretty = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = await PatchNamespacedScheduledJobAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  partially update the specified ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> PatchNamespacedScheduledJobAsyncWithHttpInfo (string name, string _namespace, UnversionedPatch body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->PatchNamespacedScheduledJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->PatchNamespacedScheduledJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->PatchNamespacedScheduledJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedScheduledJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

        /// <summary>
        ///  partially update status of the specified ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        public V2alpha1CronJob PatchNamespacedScheduledJobStatus (string name, string _namespace, UnversionedPatch body, string pretty = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = PatchNamespacedScheduledJobStatusWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  partially update status of the specified ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        public ApiResponse< V2alpha1CronJob > PatchNamespacedScheduledJobStatusWithHttpInfo (string name, string _namespace, UnversionedPatch body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->PatchNamespacedScheduledJobStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->PatchNamespacedScheduledJobStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->PatchNamespacedScheduledJobStatus");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedScheduledJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

        /// <summary>
        ///  partially update status of the specified ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        public async System.Threading.Tasks.Task<V2alpha1CronJob> PatchNamespacedScheduledJobStatusAsync (string name, string _namespace, UnversionedPatch body, string pretty = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = await PatchNamespacedScheduledJobStatusAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  partially update status of the specified ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> PatchNamespacedScheduledJobStatusAsyncWithHttpInfo (string name, string _namespace, UnversionedPatch body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->PatchNamespacedScheduledJobStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->PatchNamespacedScheduledJobStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->PatchNamespacedScheduledJobStatus");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedScheduledJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

        /// <summary>
        ///  read the specified CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39; (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        public V2alpha1CronJob ReadNamespacedCronJob (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = ReadNamespacedCronJobWithHttpInfo(name, _namespace, pretty, exact, export);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  read the specified CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39; (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        public ApiResponse< V2alpha1CronJob > ReadNamespacedCronJobWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->ReadNamespacedCronJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ReadNamespacedCronJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (exact != null) localVarQueryParams.Add("exact", Configuration.ApiClient.ParameterToString(exact)); // query parameter
            if (export != null) localVarQueryParams.Add("export", Configuration.ApiClient.ParameterToString(export)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedCronJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

        /// <summary>
        ///  read the specified CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39; (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        public async System.Threading.Tasks.Task<V2alpha1CronJob> ReadNamespacedCronJobAsync (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = await ReadNamespacedCronJobAsyncWithHttpInfo(name, _namespace, pretty, exact, export);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  read the specified CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39; (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> ReadNamespacedCronJobAsyncWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->ReadNamespacedCronJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ReadNamespacedCronJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (exact != null) localVarQueryParams.Add("exact", Configuration.ApiClient.ParameterToString(exact)); // query parameter
            if (export != null) localVarQueryParams.Add("export", Configuration.ApiClient.ParameterToString(export)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedCronJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

        /// <summary>
        ///  read status of the specified CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        public V2alpha1CronJob ReadNamespacedCronJobStatus (string name, string _namespace, string pretty = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = ReadNamespacedCronJobStatusWithHttpInfo(name, _namespace, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  read status of the specified CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        public ApiResponse< V2alpha1CronJob > ReadNamespacedCronJobStatusWithHttpInfo (string name, string _namespace, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->ReadNamespacedCronJobStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ReadNamespacedCronJobStatus");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedCronJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

        /// <summary>
        ///  read status of the specified CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        public async System.Threading.Tasks.Task<V2alpha1CronJob> ReadNamespacedCronJobStatusAsync (string name, string _namespace, string pretty = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = await ReadNamespacedCronJobStatusAsyncWithHttpInfo(name, _namespace, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  read status of the specified CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> ReadNamespacedCronJobStatusAsyncWithHttpInfo (string name, string _namespace, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->ReadNamespacedCronJobStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ReadNamespacedCronJobStatus");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedCronJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

        /// <summary>
        ///  read the specified Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39; (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>V2alpha1Job</returns>
        public V2alpha1Job ReadNamespacedJob (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
             ApiResponse<V2alpha1Job> localVarResponse = ReadNamespacedJobWithHttpInfo(name, _namespace, pretty, exact, export);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  read the specified Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39; (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>ApiResponse of V2alpha1Job</returns>
        public ApiResponse< V2alpha1Job > ReadNamespacedJobWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->ReadNamespacedJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ReadNamespacedJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/jobs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (exact != null) localVarQueryParams.Add("exact", Configuration.ApiClient.ParameterToString(exact)); // query parameter
            if (export != null) localVarQueryParams.Add("export", Configuration.ApiClient.ParameterToString(export)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1Job)));
            
        }

        /// <summary>
        ///  read the specified Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39; (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of V2alpha1Job</returns>
        public async System.Threading.Tasks.Task<V2alpha1Job> ReadNamespacedJobAsync (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
             ApiResponse<V2alpha1Job> localVarResponse = await ReadNamespacedJobAsyncWithHttpInfo(name, _namespace, pretty, exact, export);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  read the specified Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39; (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1Job)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V2alpha1Job>> ReadNamespacedJobAsyncWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->ReadNamespacedJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ReadNamespacedJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/jobs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (exact != null) localVarQueryParams.Add("exact", Configuration.ApiClient.ParameterToString(exact)); // query parameter
            if (export != null) localVarQueryParams.Add("export", Configuration.ApiClient.ParameterToString(export)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1Job)));
            
        }

        /// <summary>
        ///  read status of the specified Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1Job</returns>
        public V2alpha1Job ReadNamespacedJobStatus (string name, string _namespace, string pretty = null)
        {
             ApiResponse<V2alpha1Job> localVarResponse = ReadNamespacedJobStatusWithHttpInfo(name, _namespace, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  read status of the specified Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1Job</returns>
        public ApiResponse< V2alpha1Job > ReadNamespacedJobStatusWithHttpInfo (string name, string _namespace, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->ReadNamespacedJobStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ReadNamespacedJobStatus");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/jobs/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1Job)));
            
        }

        /// <summary>
        ///  read status of the specified Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1Job</returns>
        public async System.Threading.Tasks.Task<V2alpha1Job> ReadNamespacedJobStatusAsync (string name, string _namespace, string pretty = null)
        {
             ApiResponse<V2alpha1Job> localVarResponse = await ReadNamespacedJobStatusAsyncWithHttpInfo(name, _namespace, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  read status of the specified Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1Job)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V2alpha1Job>> ReadNamespacedJobStatusAsyncWithHttpInfo (string name, string _namespace, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->ReadNamespacedJobStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ReadNamespacedJobStatus");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/jobs/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1Job)));
            
        }

        /// <summary>
        ///  read the specified ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39; (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        public V2alpha1CronJob ReadNamespacedScheduledJob (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = ReadNamespacedScheduledJobWithHttpInfo(name, _namespace, pretty, exact, export);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  read the specified ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39; (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        public ApiResponse< V2alpha1CronJob > ReadNamespacedScheduledJobWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->ReadNamespacedScheduledJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ReadNamespacedScheduledJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (exact != null) localVarQueryParams.Add("exact", Configuration.ApiClient.ParameterToString(exact)); // query parameter
            if (export != null) localVarQueryParams.Add("export", Configuration.ApiClient.ParameterToString(export)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedScheduledJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

        /// <summary>
        ///  read the specified ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39; (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        public async System.Threading.Tasks.Task<V2alpha1CronJob> ReadNamespacedScheduledJobAsync (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = await ReadNamespacedScheduledJobAsyncWithHttpInfo(name, _namespace, pretty, exact, export);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  read the specified ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39; (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> ReadNamespacedScheduledJobAsyncWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->ReadNamespacedScheduledJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ReadNamespacedScheduledJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (exact != null) localVarQueryParams.Add("exact", Configuration.ApiClient.ParameterToString(exact)); // query parameter
            if (export != null) localVarQueryParams.Add("export", Configuration.ApiClient.ParameterToString(export)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedScheduledJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

        /// <summary>
        ///  read status of the specified ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        public V2alpha1CronJob ReadNamespacedScheduledJobStatus (string name, string _namespace, string pretty = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = ReadNamespacedScheduledJobStatusWithHttpInfo(name, _namespace, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  read status of the specified ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        public ApiResponse< V2alpha1CronJob > ReadNamespacedScheduledJobStatusWithHttpInfo (string name, string _namespace, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->ReadNamespacedScheduledJobStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ReadNamespacedScheduledJobStatus");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedScheduledJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

        /// <summary>
        ///  read status of the specified ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        public async System.Threading.Tasks.Task<V2alpha1CronJob> ReadNamespacedScheduledJobStatusAsync (string name, string _namespace, string pretty = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = await ReadNamespacedScheduledJobStatusAsyncWithHttpInfo(name, _namespace, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  read status of the specified ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> ReadNamespacedScheduledJobStatusAsyncWithHttpInfo (string name, string _namespace, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->ReadNamespacedScheduledJobStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ReadNamespacedScheduledJobStatus");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedScheduledJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

        /// <summary>
        ///  replace the specified CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        public V2alpha1CronJob ReplaceNamespacedCronJob (string name, string _namespace, V2alpha1CronJob body, string pretty = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = ReplaceNamespacedCronJobWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  replace the specified CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        public ApiResponse< V2alpha1CronJob > ReplaceNamespacedCronJobWithHttpInfo (string name, string _namespace, V2alpha1CronJob body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->ReplaceNamespacedCronJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ReplaceNamespacedCronJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->ReplaceNamespacedCronJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedCronJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

        /// <summary>
        ///  replace the specified CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        public async System.Threading.Tasks.Task<V2alpha1CronJob> ReplaceNamespacedCronJobAsync (string name, string _namespace, V2alpha1CronJob body, string pretty = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = await ReplaceNamespacedCronJobAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  replace the specified CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> ReplaceNamespacedCronJobAsyncWithHttpInfo (string name, string _namespace, V2alpha1CronJob body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->ReplaceNamespacedCronJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ReplaceNamespacedCronJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->ReplaceNamespacedCronJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedCronJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

        /// <summary>
        ///  replace status of the specified CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        public V2alpha1CronJob ReplaceNamespacedCronJobStatus (string name, string _namespace, V2alpha1CronJob body, string pretty = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = ReplaceNamespacedCronJobStatusWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  replace status of the specified CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        public ApiResponse< V2alpha1CronJob > ReplaceNamespacedCronJobStatusWithHttpInfo (string name, string _namespace, V2alpha1CronJob body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->ReplaceNamespacedCronJobStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ReplaceNamespacedCronJobStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->ReplaceNamespacedCronJobStatus");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedCronJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

        /// <summary>
        ///  replace status of the specified CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        public async System.Threading.Tasks.Task<V2alpha1CronJob> ReplaceNamespacedCronJobStatusAsync (string name, string _namespace, V2alpha1CronJob body, string pretty = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = await ReplaceNamespacedCronJobStatusAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  replace status of the specified CronJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the CronJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> ReplaceNamespacedCronJobStatusAsyncWithHttpInfo (string name, string _namespace, V2alpha1CronJob body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->ReplaceNamespacedCronJobStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ReplaceNamespacedCronJobStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->ReplaceNamespacedCronJobStatus");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedCronJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

        /// <summary>
        ///  replace the specified Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1Job</returns>
        public V2alpha1Job ReplaceNamespacedJob (string name, string _namespace, V2alpha1Job body, string pretty = null)
        {
             ApiResponse<V2alpha1Job> localVarResponse = ReplaceNamespacedJobWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  replace the specified Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1Job</returns>
        public ApiResponse< V2alpha1Job > ReplaceNamespacedJobWithHttpInfo (string name, string _namespace, V2alpha1Job body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->ReplaceNamespacedJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ReplaceNamespacedJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->ReplaceNamespacedJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/jobs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1Job)));
            
        }

        /// <summary>
        ///  replace the specified Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1Job</returns>
        public async System.Threading.Tasks.Task<V2alpha1Job> ReplaceNamespacedJobAsync (string name, string _namespace, V2alpha1Job body, string pretty = null)
        {
             ApiResponse<V2alpha1Job> localVarResponse = await ReplaceNamespacedJobAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  replace the specified Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1Job)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V2alpha1Job>> ReplaceNamespacedJobAsyncWithHttpInfo (string name, string _namespace, V2alpha1Job body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->ReplaceNamespacedJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ReplaceNamespacedJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->ReplaceNamespacedJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/jobs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1Job)));
            
        }

        /// <summary>
        ///  replace status of the specified Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1Job</returns>
        public V2alpha1Job ReplaceNamespacedJobStatus (string name, string _namespace, V2alpha1Job body, string pretty = null)
        {
             ApiResponse<V2alpha1Job> localVarResponse = ReplaceNamespacedJobStatusWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  replace status of the specified Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1Job</returns>
        public ApiResponse< V2alpha1Job > ReplaceNamespacedJobStatusWithHttpInfo (string name, string _namespace, V2alpha1Job body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->ReplaceNamespacedJobStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ReplaceNamespacedJobStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->ReplaceNamespacedJobStatus");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/jobs/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1Job)));
            
        }

        /// <summary>
        ///  replace status of the specified Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1Job</returns>
        public async System.Threading.Tasks.Task<V2alpha1Job> ReplaceNamespacedJobStatusAsync (string name, string _namespace, V2alpha1Job body, string pretty = null)
        {
             ApiResponse<V2alpha1Job> localVarResponse = await ReplaceNamespacedJobStatusAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  replace status of the specified Job
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Job</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1Job)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V2alpha1Job>> ReplaceNamespacedJobStatusAsyncWithHttpInfo (string name, string _namespace, V2alpha1Job body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->ReplaceNamespacedJobStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ReplaceNamespacedJobStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->ReplaceNamespacedJobStatus");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/jobs/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1Job)));
            
        }

        /// <summary>
        ///  replace the specified ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        public V2alpha1CronJob ReplaceNamespacedScheduledJob (string name, string _namespace, V2alpha1CronJob body, string pretty = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = ReplaceNamespacedScheduledJobWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  replace the specified ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        public ApiResponse< V2alpha1CronJob > ReplaceNamespacedScheduledJobWithHttpInfo (string name, string _namespace, V2alpha1CronJob body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->ReplaceNamespacedScheduledJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ReplaceNamespacedScheduledJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->ReplaceNamespacedScheduledJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedScheduledJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

        /// <summary>
        ///  replace the specified ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        public async System.Threading.Tasks.Task<V2alpha1CronJob> ReplaceNamespacedScheduledJobAsync (string name, string _namespace, V2alpha1CronJob body, string pretty = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = await ReplaceNamespacedScheduledJobAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  replace the specified ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> ReplaceNamespacedScheduledJobAsyncWithHttpInfo (string name, string _namespace, V2alpha1CronJob body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->ReplaceNamespacedScheduledJob");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ReplaceNamespacedScheduledJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->ReplaceNamespacedScheduledJob");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedScheduledJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

        /// <summary>
        ///  replace status of the specified ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V2alpha1CronJob</returns>
        public V2alpha1CronJob ReplaceNamespacedScheduledJobStatus (string name, string _namespace, V2alpha1CronJob body, string pretty = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = ReplaceNamespacedScheduledJobStatusWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  replace status of the specified ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V2alpha1CronJob</returns>
        public ApiResponse< V2alpha1CronJob > ReplaceNamespacedScheduledJobStatusWithHttpInfo (string name, string _namespace, V2alpha1CronJob body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->ReplaceNamespacedScheduledJobStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ReplaceNamespacedScheduledJobStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->ReplaceNamespacedScheduledJobStatus");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedScheduledJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

        /// <summary>
        ///  replace status of the specified ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V2alpha1CronJob</returns>
        public async System.Threading.Tasks.Task<V2alpha1CronJob> ReplaceNamespacedScheduledJobStatusAsync (string name, string _namespace, V2alpha1CronJob body, string pretty = null)
        {
             ApiResponse<V2alpha1CronJob> localVarResponse = await ReplaceNamespacedScheduledJobStatusAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  replace status of the specified ScheduledJob
        /// </summary>
        /// <exception cref="io.kubernetes.csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ScheduledJob</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V2alpha1CronJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V2alpha1CronJob>> ReplaceNamespacedScheduledJobStatusAsyncWithHttpInfo (string name, string _namespace, V2alpha1CronJob body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BatchV2alpha1Api->ReplaceNamespacedScheduledJobStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling BatchV2alpha1Api->ReplaceNamespacedScheduledJobStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BatchV2alpha1Api->ReplaceNamespacedScheduledJobStatus");

            var localVarPath = "/apis/batch/v2alpha1/namespaces/{namespace}/scheduledjobs/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedScheduledJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V2alpha1CronJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V2alpha1CronJob) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V2alpha1CronJob)));
            
        }

    }
}
