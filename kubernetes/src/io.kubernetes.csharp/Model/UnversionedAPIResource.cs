/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.5.1-660c2a2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace io.kubernetes.csharp.Model
{
    /// <summary>
    /// APIResource specifies the name of a resource and whether it is namespaced.
    /// </summary>
    [DataContract]
    public partial class UnversionedAPIResource :  IEquatable<UnversionedAPIResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnversionedAPIResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UnversionedAPIResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UnversionedAPIResource" /> class.
        /// </summary>
        /// <param name="Kind">kind is the kind for the resource (e.g. &#39;Foo&#39; is the kind for a resource &#39;foo&#39;) (required).</param>
        /// <param name="Name">name is the name of the resource. (required).</param>
        /// <param name="Namespaced">namespaced indicates if a resource is namespaced or not. (required).</param>
        public UnversionedAPIResource(string Kind = default(string), string Name = default(string), bool? Namespaced = default(bool?))
        {
            // to ensure "Kind" is required (not null)
            if (Kind == null)
            {
                throw new InvalidDataException("Kind is a required property for UnversionedAPIResource and cannot be null");
            }
            else
            {
                this.Kind = Kind;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for UnversionedAPIResource and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Namespaced" is required (not null)
            if (Namespaced == null)
            {
                throw new InvalidDataException("Namespaced is a required property for UnversionedAPIResource and cannot be null");
            }
            else
            {
                this.Namespaced = Namespaced;
            }
        }
        
        /// <summary>
        /// kind is the kind for the resource (e.g. &#39;Foo&#39; is the kind for a resource &#39;foo&#39;)
        /// </summary>
        /// <value>kind is the kind for the resource (e.g. &#39;Foo&#39; is the kind for a resource &#39;foo&#39;)</value>
        [DataMember(Name="kind", EmitDefaultValue=false)]
        public string Kind { get; set; }
        /// <summary>
        /// name is the name of the resource.
        /// </summary>
        /// <value>name is the name of the resource.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// namespaced indicates if a resource is namespaced or not.
        /// </summary>
        /// <value>namespaced indicates if a resource is namespaced or not.</value>
        [DataMember(Name="namespaced", EmitDefaultValue=false)]
        public bool? Namespaced { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnversionedAPIResource {\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Namespaced: ").Append(Namespaced).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UnversionedAPIResource);
        }

        /// <summary>
        /// Returns true if UnversionedAPIResource instances are equal
        /// </summary>
        /// <param name="other">Instance of UnversionedAPIResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnversionedAPIResource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Kind == other.Kind ||
                    this.Kind != null &&
                    this.Kind.Equals(other.Kind)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Namespaced == other.Namespaced ||
                    this.Namespaced != null &&
                    this.Namespaced.Equals(other.Namespaced)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Kind != null)
                    hash = hash * 59 + this.Kind.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Namespaced != null)
                    hash = hash * 59 + this.Namespaced.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
