/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.5.1-660c2a2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace io.kubernetes.csharp.Model
{
    /// <summary>
    /// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
    /// </summary>
    [DataContract]
    public partial class UnversionedLabelSelector :  IEquatable<UnversionedLabelSelector>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnversionedLabelSelector" /> class.
        /// </summary>
        /// <param name="MatchExpressions">matchExpressions is a list of label selector requirements. The requirements are ANDed..</param>
        /// <param name="MatchLabels">matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \&quot;key\&quot;, the operator is \&quot;In\&quot;, and the values array contains only \&quot;value\&quot;. The requirements are ANDed..</param>
        public UnversionedLabelSelector(List<UnversionedLabelSelectorRequirement> MatchExpressions = default(List<UnversionedLabelSelectorRequirement>), Dictionary<string, string> MatchLabels = default(Dictionary<string, string>))
        {
            this.MatchExpressions = MatchExpressions;
            this.MatchLabels = MatchLabels;
        }
        
        /// <summary>
        /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
        /// </summary>
        /// <value>matchExpressions is a list of label selector requirements. The requirements are ANDed.</value>
        [DataMember(Name="matchExpressions", EmitDefaultValue=false)]
        public List<UnversionedLabelSelectorRequirement> MatchExpressions { get; set; }
        /// <summary>
        /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \&quot;key\&quot;, the operator is \&quot;In\&quot;, and the values array contains only \&quot;value\&quot;. The requirements are ANDed.
        /// </summary>
        /// <value>matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \&quot;key\&quot;, the operator is \&quot;In\&quot;, and the values array contains only \&quot;value\&quot;. The requirements are ANDed.</value>
        [DataMember(Name="matchLabels", EmitDefaultValue=false)]
        public Dictionary<string, string> MatchLabels { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnversionedLabelSelector {\n");
            sb.Append("  MatchExpressions: ").Append(MatchExpressions).Append("\n");
            sb.Append("  MatchLabels: ").Append(MatchLabels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UnversionedLabelSelector);
        }

        /// <summary>
        /// Returns true if UnversionedLabelSelector instances are equal
        /// </summary>
        /// <param name="other">Instance of UnversionedLabelSelector to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnversionedLabelSelector other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MatchExpressions == other.MatchExpressions ||
                    this.MatchExpressions != null &&
                    this.MatchExpressions.SequenceEqual(other.MatchExpressions)
                ) && 
                (
                    this.MatchLabels == other.MatchLabels ||
                    this.MatchLabels != null &&
                    this.MatchLabels.SequenceEqual(other.MatchLabels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MatchExpressions != null)
                    hash = hash * 59 + this.MatchExpressions.GetHashCode();
                if (this.MatchLabels != null)
                    hash = hash * 59 + this.MatchLabels.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
