/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.5.1-660c2a2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace io.kubernetes.csharp.Model
{
    /// <summary>
    /// ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.
    /// </summary>
    [DataContract]
    public partial class UnversionedServerAddressByClientCIDR :  IEquatable<UnversionedServerAddressByClientCIDR>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnversionedServerAddressByClientCIDR" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UnversionedServerAddressByClientCIDR() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UnversionedServerAddressByClientCIDR" /> class.
        /// </summary>
        /// <param name="ClientCIDR">The CIDR with which clients can match their IP to figure out the server address that they should use. (required).</param>
        /// <param name="ServerAddress">Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port. (required).</param>
        public UnversionedServerAddressByClientCIDR(string ClientCIDR = default(string), string ServerAddress = default(string))
        {
            // to ensure "ClientCIDR" is required (not null)
            if (ClientCIDR == null)
            {
                throw new InvalidDataException("ClientCIDR is a required property for UnversionedServerAddressByClientCIDR and cannot be null");
            }
            else
            {
                this.ClientCIDR = ClientCIDR;
            }
            // to ensure "ServerAddress" is required (not null)
            if (ServerAddress == null)
            {
                throw new InvalidDataException("ServerAddress is a required property for UnversionedServerAddressByClientCIDR and cannot be null");
            }
            else
            {
                this.ServerAddress = ServerAddress;
            }
        }
        
        /// <summary>
        /// The CIDR with which clients can match their IP to figure out the server address that they should use.
        /// </summary>
        /// <value>The CIDR with which clients can match their IP to figure out the server address that they should use.</value>
        [DataMember(Name="clientCIDR", EmitDefaultValue=false)]
        public string ClientCIDR { get; set; }
        /// <summary>
        /// Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.
        /// </summary>
        /// <value>Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.</value>
        [DataMember(Name="serverAddress", EmitDefaultValue=false)]
        public string ServerAddress { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnversionedServerAddressByClientCIDR {\n");
            sb.Append("  ClientCIDR: ").Append(ClientCIDR).Append("\n");
            sb.Append("  ServerAddress: ").Append(ServerAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UnversionedServerAddressByClientCIDR);
        }

        /// <summary>
        /// Returns true if UnversionedServerAddressByClientCIDR instances are equal
        /// </summary>
        /// <param name="other">Instance of UnversionedServerAddressByClientCIDR to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnversionedServerAddressByClientCIDR other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ClientCIDR == other.ClientCIDR ||
                    this.ClientCIDR != null &&
                    this.ClientCIDR.Equals(other.ClientCIDR)
                ) && 
                (
                    this.ServerAddress == other.ServerAddress ||
                    this.ServerAddress != null &&
                    this.ServerAddress.Equals(other.ServerAddress)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ClientCIDR != null)
                    hash = hash * 59 + this.ClientCIDR.GetHashCode();
                if (this.ServerAddress != null)
                    hash = hash * 59 + this.ServerAddress.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
