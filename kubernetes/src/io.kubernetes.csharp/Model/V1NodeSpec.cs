/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.5.1-660c2a2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace io.kubernetes.csharp.Model
{
    /// <summary>
    /// NodeSpec describes the attributes that a node is created with.
    /// </summary>
    [DataContract]
    public partial class V1NodeSpec :  IEquatable<V1NodeSpec>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1NodeSpec" /> class.
        /// </summary>
        /// <param name="ExternalID">External ID of the node assigned by some machine database (e.g. a cloud provider). Deprecated..</param>
        /// <param name="PodCIDR">PodCIDR represents the pod IP range assigned to the node..</param>
        /// <param name="ProviderID">ID of the node assigned by the cloud provider in the format: &lt;ProviderName&gt;://&lt;ProviderSpecificNodeID&gt;.</param>
        /// <param name="Unschedulable">Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: http://releases.k8s.io/HEAD/docs/admin/node.md#manual-node-administration\&quot;.</param>
        public V1NodeSpec(string ExternalID = default(string), string PodCIDR = default(string), string ProviderID = default(string), bool? Unschedulable = default(bool?))
        {
            this.ExternalID = ExternalID;
            this.PodCIDR = PodCIDR;
            this.ProviderID = ProviderID;
            this.Unschedulable = Unschedulable;
        }
        
        /// <summary>
        /// External ID of the node assigned by some machine database (e.g. a cloud provider). Deprecated.
        /// </summary>
        /// <value>External ID of the node assigned by some machine database (e.g. a cloud provider). Deprecated.</value>
        [DataMember(Name="externalID", EmitDefaultValue=false)]
        public string ExternalID { get; set; }
        /// <summary>
        /// PodCIDR represents the pod IP range assigned to the node.
        /// </summary>
        /// <value>PodCIDR represents the pod IP range assigned to the node.</value>
        [DataMember(Name="podCIDR", EmitDefaultValue=false)]
        public string PodCIDR { get; set; }
        /// <summary>
        /// ID of the node assigned by the cloud provider in the format: &lt;ProviderName&gt;://&lt;ProviderSpecificNodeID&gt;
        /// </summary>
        /// <value>ID of the node assigned by the cloud provider in the format: &lt;ProviderName&gt;://&lt;ProviderSpecificNodeID&gt;</value>
        [DataMember(Name="providerID", EmitDefaultValue=false)]
        public string ProviderID { get; set; }
        /// <summary>
        /// Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: http://releases.k8s.io/HEAD/docs/admin/node.md#manual-node-administration\&quot;
        /// </summary>
        /// <value>Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: http://releases.k8s.io/HEAD/docs/admin/node.md#manual-node-administration\&quot;</value>
        [DataMember(Name="unschedulable", EmitDefaultValue=false)]
        public bool? Unschedulable { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1NodeSpec {\n");
            sb.Append("  ExternalID: ").Append(ExternalID).Append("\n");
            sb.Append("  PodCIDR: ").Append(PodCIDR).Append("\n");
            sb.Append("  ProviderID: ").Append(ProviderID).Append("\n");
            sb.Append("  Unschedulable: ").Append(Unschedulable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1NodeSpec);
        }

        /// <summary>
        /// Returns true if V1NodeSpec instances are equal
        /// </summary>
        /// <param name="other">Instance of V1NodeSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1NodeSpec other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ExternalID == other.ExternalID ||
                    this.ExternalID != null &&
                    this.ExternalID.Equals(other.ExternalID)
                ) && 
                (
                    this.PodCIDR == other.PodCIDR ||
                    this.PodCIDR != null &&
                    this.PodCIDR.Equals(other.PodCIDR)
                ) && 
                (
                    this.ProviderID == other.ProviderID ||
                    this.ProviderID != null &&
                    this.ProviderID.Equals(other.ProviderID)
                ) && 
                (
                    this.Unschedulable == other.Unschedulable ||
                    this.Unschedulable != null &&
                    this.Unschedulable.Equals(other.Unschedulable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ExternalID != null)
                    hash = hash * 59 + this.ExternalID.GetHashCode();
                if (this.PodCIDR != null)
                    hash = hash * 59 + this.PodCIDR.GetHashCode();
                if (this.ProviderID != null)
                    hash = hash * 59 + this.ProviderID.GetHashCode();
                if (this.Unschedulable != null)
                    hash = hash * 59 + this.Unschedulable.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
