/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.5.1-660c2a2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace io.kubernetes.csharp.Model
{
    /// <summary>
    /// PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
    /// </summary>
    [DataContract]
    public partial class V1PersistentVolumeClaimSpec :  IEquatable<V1PersistentVolumeClaimSpec>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1PersistentVolumeClaimSpec" /> class.
        /// </summary>
        /// <param name="AccessModes">AccessModes contains the desired access modes the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes-1.</param>
        /// <param name="Resources">Resources represents the minimum resources the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#resources.</param>
        /// <param name="Selector">A label query over volumes to consider for binding..</param>
        /// <param name="VolumeName">VolumeName is the binding reference to the PersistentVolume backing this claim..</param>
        public V1PersistentVolumeClaimSpec(List<string> AccessModes = default(List<string>), V1ResourceRequirements Resources = default(V1ResourceRequirements), UnversionedLabelSelector Selector = default(UnversionedLabelSelector), string VolumeName = default(string))
        {
            this.AccessModes = AccessModes;
            this.Resources = Resources;
            this.Selector = Selector;
            this.VolumeName = VolumeName;
        }
        
        /// <summary>
        /// AccessModes contains the desired access modes the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes-1
        /// </summary>
        /// <value>AccessModes contains the desired access modes the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes-1</value>
        [DataMember(Name="accessModes", EmitDefaultValue=false)]
        public List<string> AccessModes { get; set; }
        /// <summary>
        /// Resources represents the minimum resources the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#resources
        /// </summary>
        /// <value>Resources represents the minimum resources the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#resources</value>
        [DataMember(Name="resources", EmitDefaultValue=false)]
        public V1ResourceRequirements Resources { get; set; }
        /// <summary>
        /// A label query over volumes to consider for binding.
        /// </summary>
        /// <value>A label query over volumes to consider for binding.</value>
        [DataMember(Name="selector", EmitDefaultValue=false)]
        public UnversionedLabelSelector Selector { get; set; }
        /// <summary>
        /// VolumeName is the binding reference to the PersistentVolume backing this claim.
        /// </summary>
        /// <value>VolumeName is the binding reference to the PersistentVolume backing this claim.</value>
        [DataMember(Name="volumeName", EmitDefaultValue=false)]
        public string VolumeName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1PersistentVolumeClaimSpec {\n");
            sb.Append("  AccessModes: ").Append(AccessModes).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  Selector: ").Append(Selector).Append("\n");
            sb.Append("  VolumeName: ").Append(VolumeName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1PersistentVolumeClaimSpec);
        }

        /// <summary>
        /// Returns true if V1PersistentVolumeClaimSpec instances are equal
        /// </summary>
        /// <param name="other">Instance of V1PersistentVolumeClaimSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1PersistentVolumeClaimSpec other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccessModes == other.AccessModes ||
                    this.AccessModes != null &&
                    this.AccessModes.SequenceEqual(other.AccessModes)
                ) && 
                (
                    this.Resources == other.Resources ||
                    this.Resources != null &&
                    this.Resources.Equals(other.Resources)
                ) && 
                (
                    this.Selector == other.Selector ||
                    this.Selector != null &&
                    this.Selector.Equals(other.Selector)
                ) && 
                (
                    this.VolumeName == other.VolumeName ||
                    this.VolumeName != null &&
                    this.VolumeName.Equals(other.VolumeName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccessModes != null)
                    hash = hash * 59 + this.AccessModes.GetHashCode();
                if (this.Resources != null)
                    hash = hash * 59 + this.Resources.GetHashCode();
                if (this.Selector != null)
                    hash = hash * 59 + this.Selector.GetHashCode();
                if (this.VolumeName != null)
                    hash = hash * 59 + this.VolumeName.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
