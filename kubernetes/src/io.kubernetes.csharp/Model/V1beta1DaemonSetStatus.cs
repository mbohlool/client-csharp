/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.5.1-660c2a2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace io.kubernetes.csharp.Model
{
    /// <summary>
    /// DaemonSetStatus represents the current status of a daemon set.
    /// </summary>
    [DataContract]
    public partial class V1beta1DaemonSetStatus :  IEquatable<V1beta1DaemonSetStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1beta1DaemonSetStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1beta1DaemonSetStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1beta1DaemonSetStatus" /> class.
        /// </summary>
        /// <param name="CurrentNumberScheduled">CurrentNumberScheduled is the number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: http://releases.k8s.io/HEAD/docs/admin/daemons.md (required).</param>
        /// <param name="DesiredNumberScheduled">DesiredNumberScheduled is the total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: http://releases.k8s.io/HEAD/docs/admin/daemons.md (required).</param>
        /// <param name="NumberMisscheduled">NumberMisscheduled is the number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: http://releases.k8s.io/HEAD/docs/admin/daemons.md (required).</param>
        /// <param name="NumberReady">NumberReady is the number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready. (required).</param>
        public V1beta1DaemonSetStatus(int? CurrentNumberScheduled = default(int?), int? DesiredNumberScheduled = default(int?), int? NumberMisscheduled = default(int?), int? NumberReady = default(int?))
        {
            // to ensure "CurrentNumberScheduled" is required (not null)
            if (CurrentNumberScheduled == null)
            {
                throw new InvalidDataException("CurrentNumberScheduled is a required property for V1beta1DaemonSetStatus and cannot be null");
            }
            else
            {
                this.CurrentNumberScheduled = CurrentNumberScheduled;
            }
            // to ensure "DesiredNumberScheduled" is required (not null)
            if (DesiredNumberScheduled == null)
            {
                throw new InvalidDataException("DesiredNumberScheduled is a required property for V1beta1DaemonSetStatus and cannot be null");
            }
            else
            {
                this.DesiredNumberScheduled = DesiredNumberScheduled;
            }
            // to ensure "NumberMisscheduled" is required (not null)
            if (NumberMisscheduled == null)
            {
                throw new InvalidDataException("NumberMisscheduled is a required property for V1beta1DaemonSetStatus and cannot be null");
            }
            else
            {
                this.NumberMisscheduled = NumberMisscheduled;
            }
            // to ensure "NumberReady" is required (not null)
            if (NumberReady == null)
            {
                throw new InvalidDataException("NumberReady is a required property for V1beta1DaemonSetStatus and cannot be null");
            }
            else
            {
                this.NumberReady = NumberReady;
            }
        }
        
        /// <summary>
        /// CurrentNumberScheduled is the number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: http://releases.k8s.io/HEAD/docs/admin/daemons.md
        /// </summary>
        /// <value>CurrentNumberScheduled is the number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: http://releases.k8s.io/HEAD/docs/admin/daemons.md</value>
        [DataMember(Name="currentNumberScheduled", EmitDefaultValue=false)]
        public int? CurrentNumberScheduled { get; set; }
        /// <summary>
        /// DesiredNumberScheduled is the total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: http://releases.k8s.io/HEAD/docs/admin/daemons.md
        /// </summary>
        /// <value>DesiredNumberScheduled is the total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: http://releases.k8s.io/HEAD/docs/admin/daemons.md</value>
        [DataMember(Name="desiredNumberScheduled", EmitDefaultValue=false)]
        public int? DesiredNumberScheduled { get; set; }
        /// <summary>
        /// NumberMisscheduled is the number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: http://releases.k8s.io/HEAD/docs/admin/daemons.md
        /// </summary>
        /// <value>NumberMisscheduled is the number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: http://releases.k8s.io/HEAD/docs/admin/daemons.md</value>
        [DataMember(Name="numberMisscheduled", EmitDefaultValue=false)]
        public int? NumberMisscheduled { get; set; }
        /// <summary>
        /// NumberReady is the number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
        /// </summary>
        /// <value>NumberReady is the number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.</value>
        [DataMember(Name="numberReady", EmitDefaultValue=false)]
        public int? NumberReady { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1beta1DaemonSetStatus {\n");
            sb.Append("  CurrentNumberScheduled: ").Append(CurrentNumberScheduled).Append("\n");
            sb.Append("  DesiredNumberScheduled: ").Append(DesiredNumberScheduled).Append("\n");
            sb.Append("  NumberMisscheduled: ").Append(NumberMisscheduled).Append("\n");
            sb.Append("  NumberReady: ").Append(NumberReady).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1beta1DaemonSetStatus);
        }

        /// <summary>
        /// Returns true if V1beta1DaemonSetStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of V1beta1DaemonSetStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1beta1DaemonSetStatus other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CurrentNumberScheduled == other.CurrentNumberScheduled ||
                    this.CurrentNumberScheduled != null &&
                    this.CurrentNumberScheduled.Equals(other.CurrentNumberScheduled)
                ) && 
                (
                    this.DesiredNumberScheduled == other.DesiredNumberScheduled ||
                    this.DesiredNumberScheduled != null &&
                    this.DesiredNumberScheduled.Equals(other.DesiredNumberScheduled)
                ) && 
                (
                    this.NumberMisscheduled == other.NumberMisscheduled ||
                    this.NumberMisscheduled != null &&
                    this.NumberMisscheduled.Equals(other.NumberMisscheduled)
                ) && 
                (
                    this.NumberReady == other.NumberReady ||
                    this.NumberReady != null &&
                    this.NumberReady.Equals(other.NumberReady)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CurrentNumberScheduled != null)
                    hash = hash * 59 + this.CurrentNumberScheduled.GetHashCode();
                if (this.DesiredNumberScheduled != null)
                    hash = hash * 59 + this.DesiredNumberScheduled.GetHashCode();
                if (this.NumberMisscheduled != null)
                    hash = hash * 59 + this.NumberMisscheduled.GetHashCode();
                if (this.NumberReady != null)
                    hash = hash * 59 + this.NumberReady.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
