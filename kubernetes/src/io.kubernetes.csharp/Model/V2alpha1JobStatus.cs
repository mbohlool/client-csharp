/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.5.1-660c2a2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace io.kubernetes.csharp.Model
{
    /// <summary>
    /// JobStatus represents the current state of a Job.
    /// </summary>
    [DataContract]
    public partial class V2alpha1JobStatus :  IEquatable<V2alpha1JobStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V2alpha1JobStatus" /> class.
        /// </summary>
        /// <param name="Active">Active is the number of actively running pods..</param>
        /// <param name="CompletionTime">CompletionTime represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC..</param>
        /// <param name="Conditions">Conditions represent the latest available observations of an object&#39;s current state. More info: http://kubernetes.io/docs/user-guide/jobs.</param>
        /// <param name="Failed">Failed is the number of pods which reached Phase Failed..</param>
        /// <param name="StartTime">StartTime represents time when the job was acknowledged by the Job Manager. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC..</param>
        /// <param name="Succeeded">Succeeded is the number of pods which reached Phase Succeeded..</param>
        public V2alpha1JobStatus(int? Active = default(int?), UnversionedTime CompletionTime = default(UnversionedTime), List<V2alpha1JobCondition> Conditions = default(List<V2alpha1JobCondition>), int? Failed = default(int?), UnversionedTime StartTime = default(UnversionedTime), int? Succeeded = default(int?))
        {
            this.Active = Active;
            this.CompletionTime = CompletionTime;
            this.Conditions = Conditions;
            this.Failed = Failed;
            this.StartTime = StartTime;
            this.Succeeded = Succeeded;
        }
        
        /// <summary>
        /// Active is the number of actively running pods.
        /// </summary>
        /// <value>Active is the number of actively running pods.</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public int? Active { get; set; }
        /// <summary>
        /// CompletionTime represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
        /// </summary>
        /// <value>CompletionTime represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.</value>
        [DataMember(Name="completionTime", EmitDefaultValue=false)]
        public UnversionedTime CompletionTime { get; set; }
        /// <summary>
        /// Conditions represent the latest available observations of an object&#39;s current state. More info: http://kubernetes.io/docs/user-guide/jobs
        /// </summary>
        /// <value>Conditions represent the latest available observations of an object&#39;s current state. More info: http://kubernetes.io/docs/user-guide/jobs</value>
        [DataMember(Name="conditions", EmitDefaultValue=false)]
        public List<V2alpha1JobCondition> Conditions { get; set; }
        /// <summary>
        /// Failed is the number of pods which reached Phase Failed.
        /// </summary>
        /// <value>Failed is the number of pods which reached Phase Failed.</value>
        [DataMember(Name="failed", EmitDefaultValue=false)]
        public int? Failed { get; set; }
        /// <summary>
        /// StartTime represents time when the job was acknowledged by the Job Manager. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
        /// </summary>
        /// <value>StartTime represents time when the job was acknowledged by the Job Manager. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public UnversionedTime StartTime { get; set; }
        /// <summary>
        /// Succeeded is the number of pods which reached Phase Succeeded.
        /// </summary>
        /// <value>Succeeded is the number of pods which reached Phase Succeeded.</value>
        [DataMember(Name="succeeded", EmitDefaultValue=false)]
        public int? Succeeded { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V2alpha1JobStatus {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  CompletionTime: ").Append(CompletionTime).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Succeeded: ").Append(Succeeded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V2alpha1JobStatus);
        }

        /// <summary>
        /// Returns true if V2alpha1JobStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of V2alpha1JobStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V2alpha1JobStatus other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Active == other.Active ||
                    this.Active != null &&
                    this.Active.Equals(other.Active)
                ) && 
                (
                    this.CompletionTime == other.CompletionTime ||
                    this.CompletionTime != null &&
                    this.CompletionTime.Equals(other.CompletionTime)
                ) && 
                (
                    this.Conditions == other.Conditions ||
                    this.Conditions != null &&
                    this.Conditions.SequenceEqual(other.Conditions)
                ) && 
                (
                    this.Failed == other.Failed ||
                    this.Failed != null &&
                    this.Failed.Equals(other.Failed)
                ) && 
                (
                    this.StartTime == other.StartTime ||
                    this.StartTime != null &&
                    this.StartTime.Equals(other.StartTime)
                ) && 
                (
                    this.Succeeded == other.Succeeded ||
                    this.Succeeded != null &&
                    this.Succeeded.Equals(other.Succeeded)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Active != null)
                    hash = hash * 59 + this.Active.GetHashCode();
                if (this.CompletionTime != null)
                    hash = hash * 59 + this.CompletionTime.GetHashCode();
                if (this.Conditions != null)
                    hash = hash * 59 + this.Conditions.GetHashCode();
                if (this.Failed != null)
                    hash = hash * 59 + this.Failed.GetHashCode();
                if (this.StartTime != null)
                    hash = hash * 59 + this.StartTime.GetHashCode();
                if (this.Succeeded != null)
                    hash = hash * 59 + this.Succeeded.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
